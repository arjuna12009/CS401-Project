package project;
import java.util.*;
import java.io.File;
import java.io.FileNotFoundException;

public class Project {
	
	//parameters
	static int size;
	static int mergecount = 0;
	static int quickcount = 0;
	static int heapcount = 0;		
	
	//method to swap values
	public static void swap(float[] arr, int n1, int n2)
	{
		float temp = arr[n1];
		arr[n1] = arr[n2];
		arr[n2] = temp;
	}
	
	//method to print all elements of the array.
	public static void print(float[] arr)
	{
		
		for(int index = 0; index < size; index++)
		{
			System.out.print(arr[index] + "  ");
		}
		System.out.println();
	}
 
	int ssort(float[] arr)
	// Sorts the array using the selection sort algorithm.
	{
		int compare = 0;
		int endIndex = size - 1;
		for (int current = 0; current < endIndex; current++)
		{			
			int min = current;
			for(int j = current +1; j <= endIndex; j++)
			{
				compare++;
				//checks if current element is smaller than the min value.
				if((arr[j]) < (arr[min]))
				{
					min = j;
				}
			}		
			//swaps current and min elements.
			swap(arr, current, min);
		}
		return compare;
	}

	static int bubbleUp(float[] arr, int startIndex, int endIndex)
	// Switches adjacent pairs that are out of order
	// between values[startIndex]to values[endIndex]
	// beginning at values[endIndex].
	{
		int comparisons = 0;
		for (int index = endIndex; index > startIndex; index--)
		{
			comparisons++;
			if ((arr[index]) < (arr[index-1]))
			{
				swap(arr, index, index - 1);
			}			
		}
	    return comparisons;
	}

	int bsort(float[] arr)
	// Sorts the values array using the bubble sort algorithm.
	{
		int compare = 0;
		int current = 0;
		while (current < (size - 1))
		{
			compare += bubbleUp(arr, current, size - 1);
			current++;
		}
		return compare;
	}
	
	static int insertElement(float[] arr, int startIndex, int endIndex)
	// Upon completion, values[0]to values[endIndex] are sorted.
	{
		int comparisons = 0;
		boolean finished = false; int current = endIndex; boolean moreToSearch = true;
		while (moreToSearch && !finished)
		{
			comparisons++;
			if ((arr[current]) < (arr[current-1]))
			{			
				swap(arr, current, current - 1);
				current--;
				moreToSearch = (current != startIndex);
			}
			else
				finished = true;
		}
		return comparisons;
	}

	int isort(float[] arr)
	// Sorts the values array using the insertion sort algorithm.
	{
		int compare = 0;
		for (int count = 1; count < size; count++)
		{
			compare +=insertElement(arr, 0, count);
		}
			
		return compare;
	}
	
	// Sorts arr[leftFirst]to arr[rightLast] by merging the two subarrays.
	static void merge (float[] arr, int leftFirst, int leftLast, int rightFirst, int rightLast)
	{	
		float[] tempArray = new float[size];
		int index = leftFirst;				
		int saveFirst = leftFirst;       // to remember where to copy back
		while ((leftFirst <= leftLast) && (rightFirst <= rightLast))
		{			
			if ((arr[leftFirst]) < (arr[rightFirst]))
			{	//copy smallest element from left half to temporary array.
				mergecount++;
				tempArray[index] = arr[leftFirst];
				leftFirst++;					
			}
			else
			{	//copy smallest element from right half to temporary array.
				mergecount++;
				tempArray[index] = arr[rightFirst];
				rightFirst++;				
			}
			index++;
		}
		while (leftFirst <= leftLast)
			// Copy remaining elements from left half from original array to temporary array.
		{			
			tempArray[index] = arr[leftFirst];
			leftFirst++;
			index++;			
		}		
		while (rightFirst <= rightLast)
			// Copy remaining elements from right half from original array to temporary array.
		{
			tempArray[index] = arr[rightFirst];
			rightFirst++;
			index++;			
		}
		for (index = saveFirst; index <= rightLast; index++)
		{	//copy all elements from temporary array to original array.
			arr[index] = tempArray[index];			
		}		
	}
	
	void msort(float[] arr, int first, int last)
	// Sorts the values array using the merge sort algorithm.
	{
		if (first < last)
		{
			int middle = (first + last) / 2;
			msort(arr, first, middle);
			msort(arr, middle + 1, last);
			merge(arr, first, middle, middle + 1, last);
		}	
	}
	
	/* This method takes last element as pivot, 
    places the pivot element at its correct 
    position in sorted array, and places all 
    smaller (smaller than pivot) to left of 
    pivot and all greater elements to right 
    of pivot */
	static int split(float[] arr, int first, int last)
	{		
		float pivot = arr[last];  
        int i = (first-1); // index of smaller element 
        for (int j=first; j<last; j++) 
        { 
            // If current element is smaller than or 
            // equal to pivot 
        	quickcount++;
            if (arr[j] <= pivot) 
            { 
                i++;  
                // swap arr[i] and arr[j] 
                float temp = arr[i]; 
                arr[i] = arr[j]; 
                arr[j] = temp; 
            } 
        }  
        // swap arr[i+1] and arr[high] (or pivot) 
        float temp = arr[i+1]; 
        arr[i+1] = arr[last]; 
        arr[last] = temp;   
        return i+1;
	}
	
	//this method implements quick sort algorithm to sort the array
	void qsort(float[] arr, int first, int last)
	{	
		if (first < last)
		{			
			int splitPoint = split(arr, first, last);			
			// values[first]to values[splitPoint - 1] <= splitVal
			// values[splitPoint] = splitVal
			// values[splitPoint+1]to values[last] > splitVal			
			qsort(arr, first, splitPoint - 1);
			qsort(arr, splitPoint + 1, last);				
		}		
	}
	
	//method implements heap sort algorithm to sort the array.
	public void hsort(float arr[]) 
	{	 
		int n = arr.length; 
		float temp;
		// Build heap (rearrange array) 
		for (int i = size / 2 - 1; i >= 0; i--) 
			heap(arr, size, i); 
		
		// One by one extract an element from heap 
		for (int i= size-1; i>=0; i--) 
		{ 
			// Move current root to end 
			temp = arr[0]; 
			arr[0] = arr[i]; 
			arr[i] = temp; 	 
			// call max heap method on the reduced heap 
			heap(arr, i, 0); 
		} 
	} 
	  
	   // To heap a subtree rooted with node i which is 
	   // an index in arr[]. n is size of heap 
	void heap(float arr[], int n, int i) 
	{ 
		int largest = i;  // Initialize largest as root 
		int l = 2*i + 1;  // left = 2*i + 1 
		int r = 2*i + 2;  // right = 2*i + 2 
		float swap;
		heapcount++;
		
		// If left child is larger than root 
		if (l < n && arr[l] > arr[largest]) 
			largest = l; 
		
		// If right child is larger than largest so far 
		if (r < n && arr[r] > arr[largest]) 
			largest = r; 
		
		// If largest is not root 
		if (largest != i) 
		{ 
			swap = arr[i]; 
			arr[i] = arr[largest]; 
			arr[largest] = swap; 
			
			// Recursively heapify the affected sub-tree 
			heap(arr, n, largest); 
		} 
	}
	
	//This method implements the linear search algorithm to search an element in an array.
	public int[] lsearch(float[] arr, float x)
	{
		//ans[0] contains the position of element and ans[1] contains comparison count.
		int[] ans = new int[2];	
		for(int i = 0; i< size; i++)
		{
			ans[1]++;	
			
			if( (arr[i]) ==  (x))	
			{	
				ans[0] = i;
				return ans;	
			}
		}
		//returns -1 and the number of comparisons made if false.
		ans[0] = -1;
		return ans;
	}
	
	//This method implements the linear search algorithm to search an element in an array.
	public int[] bsearch(float[] arr, float x)
	{
		//ans[0] contains the position of element and ans[1] contains comparison count.
		int[] ans = new int[2];
		float first = 0;
		float last = size-1;		
		while(last >= first)
		{	
			ans[1]++;
			ans[0] = (int) ((first+last)/2);
			/*checks if array element is equal to element being searched 
			and return the position along with the number of comparisons made if true.*/
			if(arr[ans[0]] == x)
			{	
				return ans;
			}			
			else if((arr[ans[0]]) > (x)) 
				last = ans[0]-1;
			else 
				first = ans[0] +1;
		}		
		//returns -1 and the number of comparisons made if false.
		ans[0] = -1;
		return ans;
	}
	
	/*This method reads a file and records the number of elements in the file.
	 *It creates a array with that size and copies the data elements of the file to the array and returns it. */
	public static float[] readarray(String file)
	{		
		
		try
		{
			Scanner s1 = new Scanner(new File(file));
			//read the lines of the file and count the number of elemenets present.
			while(s1.hasNextLine())
			{				
				size++;
				s1.nextLine();							
			}
			//create an array to store the elements of the file
			float[] data = new float[1000];			
			Scanner s2 = new Scanner(new File(file));
			for(int i = 0; i < size; i++)
			{
				try
				{
					//convert all the elements into float data type.
					data[i] = Float.parseFloat(s2.nextLine());
				}
				catch(NumberFormatException nfe)
				{
					//if the file contains a data type other than float or int the program exits and prompts to restart the program.
					System.out.println("Not a Float or int data type, please enter a valid file containing a float or int data type and restart the program.");
					Runtime.getRuntime().exit(0);
				}
			}
			return data;
		}
		catch(FileNotFoundException e)
		{
			System.out.println("File not found. Please restart the program with a valid file name.");
			Runtime.getRuntime().exit(0);
			return null;
		}
	}
	
	public static void main(String[] args) {

		//parameters
		Project original = new Project();	
		boolean flag1 = true;
		int c1, c2, c3;
		int count1 = 0, count2 = 0;
		Scanner input = new Scanner(System.in);	
		System.out.println("Enter the file name: ");
		
		//creating 3 arrays one to store the original elements and two arrays for simple and O(NlogN) sorted elements.
		float[] arr1 = readarray(input.nextLine());				
		float[] arr3 = new float[1000];
		float[] arr2 = new float[1000];
		
		while(flag1 == true)
		{
			//Choices for the user
			System.out.println("\n1. View List.");
			System.out.println("2. Add an element to the list.");
			System.out.println("3. Remove an element from the list.");
			System.out.println("4. Choose a simple sort.");
			System.out.println("5. Choose a O(NlogN) sort.");
			System.out.println("6. Seacrh an element.");
			System.out.println("7. Sorting results.");
			System.out.println("8. Exit program.");
			System.out.println("Enter your choice (1-8): ");
			c1 = input.nextInt();			
			if(c1 == 1)
			{				
				System.out.println("\nList:");
				print(arr1);				
			}
			else if(c1 == 2)
			{
				
				System.out.println("Enter the element you wish to add to the list");	
				arr1[size] = input.nextFloat();
				size++;	
				System.out.println("\nElement added.");
			}
			else if(c1 == 3)
			{
				System.out.println("Enter which element you would like to remove from the original list: ");
				float remove = input.nextFloat();
				//search for the element.
				int[] pos = original.lsearch(arr1, remove);
				//to make sure the element is in the array.
				if(pos[0] == -1)
					System.out.println("Element not found in the list.");
				else
				{
					for(int i = pos[0]; i<size; i++)
					{
						arr1[i] = arr1[i+1];
					}					
					size--;	
					System.out.println("\nElement removed.");
				}							
			}			
			else if(c1 == 4)
			{
				boolean flag2 = true;
				while(flag2 == true)
				{
					//Choices to select which simple sort to use.
					System.out.println("\n1. Selection sort.");
					System.out.println("2. Bubble sort.");
					System.out.println("3. Insertion sort.");
					System.out.println("Enter your choice (1-3): ");
					c2 = input.nextInt();
					if(c2 == 1)
					{		
						//copy the original array into a arr2 after any changes made to it by the user.
						for(int i = 0; i < size; i++)
							arr2[i] = arr1[i];
						System.out.println("\nList after selection sort:");
						count1 = original.ssort(arr2);
						//print the sorted array.
						print(arr2);
						//print the no of comparison count.
						System.out.println("\nSelection sort no of comparisons count: " + count1);
						flag2 = false;
					}
					else if(c2 == 2)
					{						
						//copy the original array into a arr2 after any changes made to it by the user.
						for(int i = 0; i < size; i++)
							arr2[i] = arr1[i];
						System.out.println("\nList after bubble sort:");
						count1 = original.bsort(arr2);
						//print the sorted array.
						print(arr2);
						//print the no of comparison count.
						System.out.println("\nbubble sort no of comparisons count: " + count1);
						flag2 = false;
					}
					else if(c2 == 3)
					{			
						//copy the original array into a arr2 after any changes made to it by the user.
						for(int i = 0; i < size; i++)
							arr2[i] = arr1[i];
						System.out.println("\nList after insertion sort:");
						count1 = original.isort(arr2);
						//print the sorted array.
						print(arr2);
						//print the no of comparison count.
						System.out.println("\ninsertion sort no of comparisons count: " + count1);
						flag2 = false;
					}			
					else
						System.out.println("Wrong choice");	
				}				
			}				
			else if(c1 == 5) 
			{
				boolean flag3 = true;
				while(flag3 == true)
				{
					//Choices to select which O(NlogN) sort to use.
					System.out.println("1. Merge sort.");
					System.out.println("2. Quick sort.");
					System.out.println("3. Heap sort.");
					System.out.println("Enter your choice (1-3): ");
					c3 = input.nextInt();
					if(c3 == 1)
					{						
						//copy the original array into arr3 after any changes made to it by the user.
						for(int i = 0; i < size; i++)
							arr3[i] = arr1[i];
						System.out.println("\nList after merge sort:");
						original.msort(arr3,0,size-1);
						//print the sorted array.
						print(arr3);
						count2 = mergecount;
						//print the no of comparison count.
						System.out.println("\nMerge sort no of comparisons count: " + count2);
						flag3 = false;
					}
					else if(c3 == 2)
					{				
						//copy the original array into arr3 after any changes made to it by the user.
						for(int i = 0; i < size; i++)
							arr3[i] = arr1[i];
						System.out.println("\nList after quick sort:");
						original.qsort(arr3,0,size-1);
						//print the sorted array.
						print(arr3);
						count2 = quickcount;
						//print the no of comparison count.
						System.out.println("\nQuick sort no of comparisons count: " + count2);
						flag3 = false;
					}
					else if(c3 == 3)
					{			
						//copy the original array into arr3 after any changes made to it by the user.
						for(int i = 0; i < size; i++)
							arr3[i] = arr1[i];
						System.out.println("\nList after heap sort:");
						original.hsort(arr3);
						//print the sorted array.
						print(arr3);
						count2 = heapcount;
						//print the no of comparison count.
						System.out.println("\nHeap sort no of comparisons count: " + count2);
						flag3 = false;
					}
					else 
						System.out.println("Wrong choice");	
				}			
			}			
			else if(c1 == 6)
			{
				int[] l = new int[2];
				int[] b = new int[2];
				System.out.println("Enter a number you want to search: ");
				input.nextLine();
				String search = input.nextLine();
				/*Searching using both linear search and binary search.
				 * linear search uses the original unsorted array 
				 * while, binary search uses the sorted array.*/
				l = original.lsearch(arr1, Float.parseFloat(search));
				b = original.bsearch(arr2, Float.parseFloat(search));
				//check is the element is found in the array
				if(l[0] == -1 && b[0] == -1)
				{
					System.out.println("\nElement cannot be found.");
				}
				else
				{
					//print the result of searching using both linear and binary search.
					System.out.println();
					print(arr1);
					System.out.println("\nUsing linear search, element was found at position " + l[0] + " in the unsorted list");
					System.out.println("Number of comparisons made in linear search: " + l[1]);
					System.out.println();
					print(arr2);
					System.out.println("\nUsing binary search, element was found at position " + b[0] + " in the sorted list");
					System.out.println("Number of comparisons made in binary search: " + b[1]);
					//comparing the comparison count of linear and binary search.
					if(l[1] == b[1])
						System.out.println("\nlinear search and binary search have the same number of comparisons.");
					else if(l[1] < b[1])
						System.out.println("\nlinear search has less comparisons therefore has less complexity.");
					else
						System.out.println("\nbinary search has less comparisons therefore has less complexity.");
				}				
			}
			else if(c1 == 7)
			{
				//comparing if simple sort comparison count is less than O(NLogN) sort.
				if(count1 < count2)
				{
					System.out.println("\nSimple Sort comparisons count: " + count1);
					System.out.println("O(NlogN) Sort comparisons count: " + count2);
					System.out.println("Simple sort has less comparisons count than O(NlogN) sort so complexity is lower.");
				}
				//comparing if simple sort comparison count is less than 
				else if(count1 > count2)
				{
					System.out.println("\nSimple Sort comparisons count: " + count1);
					System.out.println("O(NlogN) Sort comparisons count: " + count2);
					System.out.println("O(NlogN) sort has less comparisons count than simple sort so complexity is lower.");
				}
				else if(count1 == count2)
				{
					System.out.println("\nSimple Sort comparisons count: " + count1);
					System.out.println("O(NlogN) Sort comparisons count: " + count2);
					System.out.println("O(NlogN) sort and simple sort have the same comparison count.");
				}
			}				
			else if(c1 == 8)
				flag1 = false;
			else
				System.out.println("Wrong choice entered.");
		}				
	}
}
